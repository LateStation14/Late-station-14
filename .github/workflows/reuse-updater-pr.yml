# SPDX-FileCopyrightText: 2025 LateStation14 Contributors
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Update REUSE SPDX headers (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: read

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  REUSE_LICENSE_MAP_PATH: .reuse/path-licenses.json

concurrency:
  group: reuse-updater-pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  reuse_spdx_pr:
    if: ${{ github.actor != 'PJBot' && github.actor != 'weh-bot' && github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Git identity
        run: |
          git config --global user.name "weh-bot"
          git config --global user.email "weh-bot@users.noreply.github.com"
        shell: bash

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        shell: bash

      - name: Determine changed files (API + git diff)
        id: diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          GH_REPO='${{ github.repository }}'
          PR_NUMBER='${{ env.PR_NUMBER }}'
          PR_FILES=""
          PAGE=1
          while true; do
            PAGE_JSON=$(curl -s -f -H "Authorization: token ${GH_TOKEN}" "https://api.github.com/repos/${GH_REPO}/pulls/${PR_NUMBER}/files?per_page=100&page=${PAGE}") || true
            if [ -z "${PAGE_JSON}" ] || ! echo "${PAGE_JSON}" | jq -e . >/dev/null 2>&1; then
              break
            fi
            PAGE_COUNT=$(echo "${PAGE_JSON}" | jq 'length')
            if [ "${PAGE_COUNT}" -eq 0 ] 2>/dev/null; then
              break
            fi
            PAGE_LINES=$(echo "${PAGE_JSON}" | jq -r '.[] | select(.filename != null) | "\(.status) \(.filename)"')
            PR_FILES=$(printf "%s\n%s\n" "${PR_FILES}" "${PAGE_LINES}")
            PAGE=$((PAGE+1))
          done

          PR_FILES=$(echo "${PR_FILES}" | sed '/^$/d' | sort -u)
          echo "API reported files (status path):"; echo "${PR_FILES}" | sed 's/^/  /' || true

          # git diff fallback using base SHA fetched from upstream (base repo)
          git remote add upstream "https://github.com/${{ github.repository }}.git" || true
          git fetch --no-tags --prune --depth=0 upstream "${{ github.event.pull_request.base.sha }}:base-sha" || true
          DIFF_LINES=$(git diff --name-status base-sha HEAD \
            | sed 's/^\t\+/\t/g' \
            | awk '{s=$1; $1=""; sub(/^\s+/, ""); print tolower(s)" "$0}' \
            | sed '/^$/d') || true
          if [ -n "${DIFF_LINES}" ]; then
            echo "git diff reported files (status path):"; echo "${DIFF_LINES}" | sed 's/^/  /'
            PR_FILES=$(printf "%s\n%s\n" "${PR_FILES}" "${DIFF_LINES}")
          fi

          PR_FILES=$(echo "${PR_FILES}" | sed '/^$/d' | sort -u)
          EXT_RE='\.(cs|js|ts|jsx|tsx|c|cpp|cc|h|hpp|java|scala|kt|swift|go|rs|dart|groovy|php|yml|yaml|ftl|py|rb|pl|pm|sh|bash|zsh|fish|ps1|r|rmd|jl|tcl|perl|conf|toml|ini|cfg|gitignore|dockerignore|bat|cmd|vb|vbs|bas|asm|s|lisp|clj|f|f90|m|sql|ada|adb|ads|hs|lhs|lua|xaml|xml|html|htm|svg|css|scss|sass|less|md|markdown)$'
          ADDED_FILES=$(echo "$PR_FILES" | awk -v extre="$EXT_RE" '{ s=tolower($1); $1=""; sub(/^\s+/, ""); p=$0; lp=tolower(p); if ((s=="added" || s=="a") && lp ~ extre) print p }' | xargs) || true
          MODIFIED_FILES=$(echo "$PR_FILES" | awk -v extre="$EXT_RE" '{ s=tolower($1); $1=""; sub(/^\s+/, ""); p=$0; lp=tolower(p); if (((s=="modified" || s=="m") || (s=="renamed" || s ~ /^r/) || (s=="copied" || s ~ /^c/) || s=="changed") && lp ~ extre) print p }' | xargs) || true

          echo "Added Files: $ADDED_FILES"; echo "Modified Files: $MODIFIED_FILES"
          {
            echo "added<<EOF"; echo "$ADDED_FILES"; echo "EOF";
            echo "modified<<EOF"; echo "$MODIFIED_FILES"; echo "EOF";
          } >> $GITHUB_OUTPUT
        shell: bash

      - name: Update SPDX headers
        if: ${{ steps.diff.outputs.added != '' || steps.diff.outputs.modified != '' }}
        run: |
          set -euo pipefail
          PYTHONPATH="" python Tools/update_pr_reuse_headers.py \
            --files-added "${{ steps.diff.outputs.added }}" \
            --files-modified "${{ steps.diff.outputs.modified }}" \
            --pr-license agpl \
            --pr-base-sha ${{ github.event.pull_request.base.sha }} \
            --pr-head-sha ${{ github.event.pull_request.head.sha }} \
            --pr-author ${{ github.event.pull_request.user.login }}
        shell: bash

      - name: Commit changes
        if: ${{ steps.diff.outputs.added != '' || steps.diff.outputs.modified != '' }}
        id: commit
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          git commit -m "chore(reuse): add/update SPDX headers (#$PR_NUMBER)"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: Push changes (same-repo PRs)
        if: ${{ steps.commit.outputs.has_changes == 'true' && github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          set -euo pipefail
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${HEAD_REPO}.git" "HEAD:${HEAD_REF}"
        shell: bash

      - name: Skip push (fork PRs)
        if: ${{ steps.commit.outputs.has_changes == 'true' && github.event.pull_request.head.repo.full_name != github.repository }}
        run: |
          echo "Detected fork PR; push is skipped in PR workflow. pull_request_target workflow on base will handle pushing once merged to default branch."
        shell: bash
